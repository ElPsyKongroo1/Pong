bool BallOnlineCollision(entity currentEntity,uint16 userSlot, entity otherEntity)
{
	bool collisionHandled = false;
	string otherEntityTag = otherEntity.Tag.GetTag();
	if (otherEntityTag == "Left Wall")
	{
		if (userSlot == 0)
		{
			GameState::SetField("PlayerTwoScore", GameState::GetFieldUInt16("PlayerTwoScore") + 1);
			UI::SetWidgetText("base_window", "score_player_2", str(GameState::GetFieldUInt16("PlayerTwoScore")));
			currentEntity.RigidBody.SetLinearVelocity({0.0f, 0.0f});
			Audio::PlaySound("Audio/lose_sound.wav");
			UI::DisplayWindow("pre_game_warning", true);
			Input::LoadInputMap("Input/Online_Pre_Start.kginput");
			Network::SignalAll(1);
			Network::EnableReadyCheck();
			collisionHandled = true;
		}
		else if (userSlot == 1)
		{
			currentEntity.RigidBody.SetLinearVelocity({0.0f, 0.0f});
		}
		
	}
	else if (otherEntityTag == "Right Wall")
	{
		if (userSlot == 1)
		{
			GameState::SetField("PlayerOneScore", GameState::GetFieldUInt16("PlayerOneScore") + 1);
			UI::SetWidgetText("base_window", "score_player_1", str(GameState::GetFieldUInt16("PlayerOneScore")));
			currentEntity.RigidBody.SetLinearVelocity({0.0f, 0.0f});
			Audio::PlaySound("Audio/lose_sound.wav");
			UI::DisplayWindow("pre_game_warning", true);
			Input::LoadInputMap("Input/Online_Pre_Start.kginput");
			Network::SignalAll(1);
			Network::EnableReadyCheck();
			collisionHandled = true;
		}
		else if (userSlot == 0)
		{
			currentEntity.RigidBody.SetLinearVelocity({0.0f, 0.0f});
		}
		
	}
	else if (otherEntityTag == "Top Wall" || otherEntityTag == "Bottom Wall")
	{
		vector2 horizontalDirection;
		vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
		if (currentVelocity.x > 0.0f)
		{
			horizontalDirection = {1.0f, 0.0f};
		}
		else
		{
			horizontalDirection =  {-1.0f, 0.0f};
		}
		currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + horizontalDirection * 0.1f) * currentEntity.Speed.CurrentSpeed;
		currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		Audio::PlaySound("Audio/pop-sound.wav");
		collisionHandled = true;
	}
	
	else if (otherEntityTag == "Player1")
	{
		if (userSlot == 0)
		{
			if (Input::IsPollingSlotPressed(0))
			{
				float deflectionFactor = Input::IsPollingSlotPressed(4) ? 0.55f : 0.33f;
				vector2 up = {0.0f, 1.0f};
				vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
				currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + up * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
				currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
			}
			if (Input::IsPollingSlotPressed(1))
			{
				float deflectionFactor = Input::IsPollingSlotPressed(4) ? 0.55f : 0.33f;
				vector2 up = {0.0f, -1.0f};
				vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
				currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + up * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
				currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
			}
		}
		
		Audio::PlaySound("Audio/pop-sound.wav");
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2")
	{
		if (userSlot == 1)
		{
			if (Input::IsPollingSlotPressed(3))
			{
				float deflectionFactor = Input::IsPollingSlotPressed(5) ? 0.55f : 0.33f;
				vector2 up = {0.0f, 1.0f};
				vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
				currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + up * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
				currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
			}
			if (Input::IsPollingSlotPressed(4))
			{
				float deflectionFactor = Input::IsPollingSlotPressed(5) ? 0.55f : 0.33f;
				vector2 up = {0.0f, -1.0f};
				vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
				currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + up * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
				currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
			}
		}
		
		Audio::PlaySound("Audio/pop-sound.wav");
		collisionHandled = true;
	}
	
	return collisionHandled;
}