bool BallOnlineCollisionStart(entity currentEntity,entity otherEntity)
{
	uint16 userSlot = NetworkService::GetActiveSessionSlot();
	bool collisionHandled = false;
	string otherEntityTag = otherEntity.Tag.GetTag();
	if (otherEntityTag == "Left Wall")
	{
		if (userSlot == 0)
		{
			Scripts::CollideLeftWall(currentEntity);
			UIService::DisplayWindow(UserInterfaces::RuntimeUI.pre_game_warning, true);
			InputService::LoadInputMap(InputMaps::Online_Pre_Start);
			NetworkService::SignalAll(1);
			NetworkService::EnableReadyCheck();
			collisionHandled = true;
		}
		else if (userSlot == 1)
		{
			currentEntity.RigidBody.SetLinearVelocity({0.0f, 0.0f});
		}
		
	}
	else if (otherEntityTag == "Right Wall")
	{
		if (userSlot == 1)
		{
			Scripts::CollideRightWall(currentEntity);
			UIService::DisplayWindow(UserInterfaces::RuntimeUI.pre_game_warning, true);
			InputService::LoadInputMap(InputMaps::Online_Pre_Start);
			NetworkService::SignalAll(1);
			NetworkService::EnableReadyCheck();
			collisionHandled = true;
		}
		else if (userSlot == 0)
		{
			currentEntity.RigidBody.SetLinearVelocity({0.0f, 0.0f});
		}
		
	}
	else if (otherEntityTag == "Top Wall" || otherEntityTag == "Bottom Wall")
	{
		Scripts::TopAndBottomWallCollision(currentEntity);
		collisionHandled = true;
	}
	
	else if (otherEntityTag == "Player1")
	{
		if (userSlot == 0)
		{
			Scripts::CollidePlayer1(currentEntity);
		}
		else
		{
			AudioService::PlaySound(AudioBuffers::pop_sound);
		}
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2")
	{
		if (userSlot == 1)
		{
			Scripts::CollidePlayer2(currentEntity);
		}
		else
		{
			AudioService::PlaySound(AudioBuffers::pop_sound);
		}
		
		collisionHandled = true;
	}
	
	return collisionHandled;
}