bool BallSinglePlayerCollisionStart(entity currentEntity,entity otherEntity)
{
	bool collisionHandled = false;
	string otherEntityTag = otherEntity.Tag.GetTag();
	
	if (otherEntityTag == "Left Wall")
	{
		Scripts::CollideLeftWall(currentEntity);
		if (GameStateService::GetFieldUInt16("PlayerTwoScore") >= GameStateService::GetFieldUInt16("WinConditionValue"))
		{
			// Lose Game
			UIService::DisplayWindow(UserInterfaces::RuntimeUI.lose_window, true);
			entity player2 = SceneService::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			InputService::LoadInputMap(InputMaps::LoseStateInput);
		}
		else
		{
			// Continue Game
			UIService::DisplayWindow(UserInterfaces::RuntimeUI.pre_game_level_warning, true);
			entity player2 = SceneService::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			InputService::LoadInputMap(InputMaps::Pre_Start);
		}
		
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2ProximitySensor")
	{
		entity player2 = SceneService::GetEntity("Player2");
		int32 randomValue = Random::GetInteger(0, 100);
		uint16 deflectUp = player2.AIBehaviorProfile.DeflectRatio / 2;
		uint16 deflectDown = player2.AIBehaviorProfile.DeflectRatio;
		if (randomValue <= deflectUp)
		{
			player2.SeekLocationData.IsDeflectingUp = false;
			player2.AIState.ChangeCurrentState(AIStates::DeflectBall);
			Scripts::DetermineDash(player2);
		}
		else if (randomValue <= deflectDown)
		{
			player2.SeekLocationData.IsDeflectingUp = true;
			player2.AIState.ChangeCurrentState(AIStates::DeflectBall);
			Scripts::DetermineDash(player2);
		}
		else
		{
			player2.AIState.ChangeCurrentState(AIStates::SeekBall);
			Scripts::DetermineDash(player2);
		}
	}
	else if (otherEntityTag == "Right Wall")
	{
		Scripts::CollideRightWall(currentEntity);
		
		
		if (GameStateService::GetFieldUInt16("PlayerOneScore") >= GameStateService::GetFieldUInt16("WinConditionValue"))
		{
			// End Game
			UIService::DisplayWindow(UserInterfaces::RuntimeUI.win_window, true);
			entity player2 = SceneService::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			InputService::LoadInputMap(InputMaps::WinStateInput);
		}
		else
		{
			// Continue Game
			UIService::DisplayWindow(UserInterfaces::RuntimeUI.pre_game_level_warning, true);
			entity player2 = SceneService::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			InputService::LoadInputMap(InputMaps::Pre_Start);
		}
		
		
		collisionHandled = true;
	}
	else if (otherEntityTag == "Top Wall" || otherEntityTag == "Bottom Wall")
	{
		Scripts::TopAndBottomWallCollision(currentEntity);
		collisionHandled = true;
	}
	
	else if (otherEntityTag == "Player1")
	{
		Scripts::CollidePlayer1(currentEntity);
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2")
	{
		if (otherEntity.AIState.IsCurrentState(AIStates::DeflectBall))
		{
			float deflectionFactor = 0.33f;
			vector2 direction;
			if (otherEntity.SeekLocationData.IsDeflectingUp)
			{
				direction = {0.0f, 1.0f};
			}
			else
			{
				direction = {0.0f, -1.0f};
			}
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + direction * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
		else
		{
			float deflectionFactor = 0.33f;
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
	
		AudioService::PlaySound(AudioBuffers::pop_sound);
		collisionHandled = true;
	}
	
	return collisionHandled;
}