bool BallSinglePlayerCollisionStart(entity currentEntity,entity otherEntity)
{
	bool collisionHandled = false;
	string otherEntityTag = otherEntity.Tag.GetTag();
	
	if (otherEntityTag == "Left Wall")
	{
		Scripts::CollideLeftWall(currentEntity);
		UI::DisplayWindow("pre_game_level_warning", true);
		entity player2 = Scenes::GetEntity("Player2");
		player2.AIState.ClearAllStates();
		Input::LoadInputMap("Common/Input/Pre_Start.kginput");
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2ProximitySensor")
	{
		entity player2 = Scenes::GetEntity("Player2");
		int32 randomValue = Random::GetInteger(0, 10);
		if (randomValue < 4)
		{
			player2.AIState.ChangeCurrentState("Entities/AIPlayer/SeekBall.kgaistate");
		}
		else if (randomValue < 7)
		{
			player2.SeekLocationData.IsDeflectingUp = true;
			player2.AIState.ChangeCurrentState("Entities/AIPlayer/DeflectBall.kgaistate");
		}
		else if (randomValue <= 10)
		{
			player2.SeekLocationData.IsDeflectingUp = false;
			player2.AIState.ChangeCurrentState("Entities/AIPlayer/DeflectBall.kgaistate");
		}
	}
	else if (otherEntityTag == "Right Wall")
	{
		GameState::SetField("PlayerOneScore", GameState::GetFieldUInt16("PlayerOneScore") + 1);
		UI::SetWidgetText("base_window", "score_player_1", str(GameState::GetFieldUInt16("PlayerOneScore")));
		currentEntity.RigidBody.SetLinearVelocity({0.0f, 0.0f});
		Audio::PlaySound("Common/Audio/lose_sound.kgaudio");
		UI::DisplayWindow("pre_game_level_warning", true);
		entity player2 = Scenes::GetEntity("Player2");
		player2.AIState.ClearAllStates();
		Input::LoadInputMap("Common/Input/Pre_Start.kginput");
		collisionHandled = true;
	}
	else if (otherEntityTag == "Top Wall" || otherEntityTag == "Bottom Wall")
	{
		vector2 horizontalDirection;
		vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
		if (currentVelocity.x > 0.0f)
		{
			horizontalDirection = {1.0f, 0.0f};
		}
		else
		{
			horizontalDirection =  {-1.0f, 0.0f};
		}
		currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + horizontalDirection * 0.1f) * currentEntity.Speed.CurrentSpeed;
		currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		Audio::PlaySound("Common/Audio/pop_sound.kgaudio");
		collisionHandled = true;
	}
	
	else if (otherEntityTag == "Player1")
	{
		
		if (Input::IsPollingSlotPressed(0))
		{
			float deflectionFactor = Input::IsPollingSlotPressed(4) ? 0.55f : 0.33f;
			vector2 up = {0.0f, 1.0f};
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + up * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
		if (Input::IsPollingSlotPressed(1))
		{
			float deflectionFactor = Input::IsPollingSlotPressed(4) ? 0.55f : 0.33f;
			vector2 up = {0.0f, -1.0f};
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + up * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
		Audio::PlaySound("Common/Audio/pop_sound.kgaudio");
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2")
	{
		if (otherEntity.AIState.IsCurrentState("Entities/AIPlayer/DeflectBall.kgaistate"))
		{
			float deflectionFactor = 0.33f;
			vector2 direction;
			if (otherEntity.SeekLocationData.IsDeflectingUp)
			{
				direction = {0.0f, 1.0f};
			}
			else
			{
				direction = {0.0f, -1.0f};
			}
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + direction * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
		else
		{
			float deflectionFactor = 0.33f;
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
	
		Audio::PlaySound("Common/Audio/pop_sound.kgaudio");
		collisionHandled = true;
	}
	
	return collisionHandled;
}
