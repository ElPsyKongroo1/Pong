bool BallSinglePlayerCollisionStart(entity currentEntity,entity otherEntity)
{
	bool collisionHandled = false;
	string otherEntityTag = otherEntity.Tag.GetTag();
	
	if (otherEntityTag == "Left Wall")
	{
		Scripts::CollideLeftWall(currentEntity);
		if (GameState::GetFieldUInt16("PlayerTwoScore") >= GameState::GetFieldUInt16("WinConditionValue"))
		{
			// Lose Game
			UI::DisplayWindow("lose_window", true);
			entity player2 = Scenes::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			Input::LoadInputMap("Common/Input/LoseStateInput.kginput");
		}
		else
		{
			// Continue Game
			UI::DisplayWindow("pre_game_level_warning", true);
			entity player2 = Scenes::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			Input::LoadInputMap("Common/Input/Pre_Start.kginput");
		}
		
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2ProximitySensor")
	{
		entity player2 = Scenes::GetEntity("Player2");
		int32 randomValue = Random::GetInteger(0, 100);
		uint16 deflectUp = player2.AIBehaviorProfile.DeflectRatio / 2;
		uint16 deflectDown = player2.AIBehaviorProfile.DeflectRatio;
		if (randomValue <= deflectUp)
		{
			player2.SeekLocationData.IsDeflectingUp = false;
			player2.AIState.ChangeCurrentState("Entities/AIPlayer/DeflectBall.kgaistate");
		}
		else if (randomValue <= deflectDown)
		{
			player2.SeekLocationData.IsDeflectingUp = true;
			player2.AIState.ChangeCurrentState("Entities/AIPlayer/DeflectBall.kgaistate");
		}
		else
		{
			player2.AIState.ChangeCurrentState("Entities/AIPlayer/SeekBall.kgaistate");
		}
	}
	else if (otherEntityTag == "Right Wall")
	{
		Scripts::CollideRightWall(currentEntity);
		
		
		if (GameState::GetFieldUInt16("PlayerOneScore") >= GameState::GetFieldUInt16("WinConditionValue"))
		{
			// End Game
			UI::DisplayWindow("win_window", true);
			entity player2 = Scenes::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			Input::LoadInputMap("Common/Input/WinStateInput.kginput");
		}
		else
		{
			// Continue Game
			UI::DisplayWindow("pre_game_level_warning", true);
			entity player2 = Scenes::GetEntity("Player2");
			player2.AIState.ClearAllStates();
			Input::LoadInputMap("Common/Input/Pre_Start.kginput");
		}
		
		
		collisionHandled = true;
	}
	else if (otherEntityTag == "Top Wall" || otherEntityTag == "Bottom Wall")
	{
		Scripts::TopAndBottomWallCollision(currentEntity);
		collisionHandled = true;
	}
	
	else if (otherEntityTag == "Player1")
	{
		Scripts::CollidePlayer1(currentEntity);
		collisionHandled = true;
	}
	else if (otherEntityTag == "Player2")
	{
		if (otherEntity.AIState.IsCurrentState("Entities/AIPlayer/DeflectBall.kgaistate"))
		{
			float deflectionFactor = 0.33f;
			vector2 direction;
			if (otherEntity.SeekLocationData.IsDeflectingUp)
			{
				direction = {0.0f, 1.0f};
			}
			else
			{
				direction = {0.0f, -1.0f};
			}
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) + direction * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
		else
		{
			float deflectionFactor = 0.33f;
			vector2 currentVelocity = currentEntity.RigidBody.GetLinearVelocity();
			currentVelocity = Math::NormalizeVector2(Math::NormalizeVector2(currentVelocity) * deflectionFactor) * currentEntity.Speed.CurrentSpeed;
			currentEntity.RigidBody.SetLinearVelocity(currentVelocity);
		}
	
		Audio::PlaySound("Common/Audio/pop_sound.kgaudio");
		collisionHandled = true;
	}
	
	return collisionHandled;
}
